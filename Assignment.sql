SELECT UPPER(FIRST_NAME) AS STUDENT_NAME FROM Student;
SELECT DISTINCT MAJOR FROM Student;
-- অথবা
SELECT MAJOR FROM Student GROUP BY MAJOR;
SELECT SUBSTRING(FIRST_NAME, 1, 3) FROM Student;
SELECT INSTR(LOWER(FIRST_NAME), 'a') FROM Student WHERE FIRST_NAME = 'Shivansh';
SELECT DISTINCT MAJOR, LENGTH(MAJOR) FROM Student;
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS COMPLETE_NAME FROM Student;
SELECT * FROM Student ORDER BY FIRST_NAME ASC, MAJOR DESC;
SELECT * FROM Student WHERE FIRST_NAME IN ('Prem', 'Shivansh');
SELECT * FROM Student WHERE FIRST_NAME NOT IN ('Prem', 'Shivansh');
SELECT * FROM Student WHERE FIRST_NAME LIKE '%a';
SELECT * FROM Student WHERE FIRST_NAME LIKE '__a';
SELECT * 
FROM Student 
WHERE GPA BETWEEN 9.00 AND 9.99;
SELECT COUNT(*) AS TOTAL_COUNT 
FROM Student 
WHERE MAJOR = 'Computer Science';
SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME 
FROM Student 
WHERE GPA BETWEEN 8.5 AND 9.5;
SELECT MAJOR, COUNT(MAJOR) 
FROM Student 
GROUP BY MAJOR 
ORDER BY COUNT(MAJOR) DESC;
SELECT 
    Student.FIRST_NAME,
    Student.LAST_NAME,
    SCHOLARSHIP_AMOUNT,
    SCHOLARSHIP_DATE
FROM Student
INNER JOIN scholarships 
    ON Student.STUDENT_ID = STUDENT_REF_ID;
 SELECT * 
FROM Student 
WHERE STUDENT_ID % 2 != 0;
SELECT 
    Student.FIRST_NAME, 
    Student.LAST_NAME,
    SCHOLARSHIP_AMOUNT,
    Scholarship.SCHOLARSHIP_DATE
FROM Student
LEFT JOIN scholarships 
    ON Student.STUDENT_ID = Scholarship.STUDENT_REF_ID;
 SELECT MAX(GPA) 
FROM Student 
WHERE GPA < (
    SELECT MAX(GPA) 
    FROM Student
);
SELECT * FROM Student
UNION ALL
SELECT * FROM Student ORDER BY STUDENT_ID; 
SELECT STUDENT_ID FROM Student
WHERE STUDENT_ID NOT IN (SELECT STUDENT_REF_ID FROM scholarships);
SELECT * FROM Student
LIMIT(SELECT FLOOR(COUNT(*) /2) FROM Student);
SELECT MAJOR, COUNT(MAJOR) AS MAJOR_COUNT FROM Student
GROUP BY MAJOR
HAVING COUNT(MAJOR) < 4;
SELECT MAJOR, COUNT(MAJOR) AS ALL_MAJOR FROM Student
GROUP BY MAJOR;
SELECT * FROM Student
WHERE STUDENT_ID = (SELECT MAX(STUDENT_ID) FROM Student);
SELECT * FROM Student
WHERE STUDENT_ID = (SELECT MIN(STUDENT_ID) FROM Student);
SELECT * FROM (
  SELECT * FROM Student ORDER BY STUDENT_ID DESC LIMIT 5
) AS LastFive
ORDER BY STUDENT_ID;
SELECT DISTINCT GPA FROM Student S1
WHERE 3 > (SELECT COUNT(DISTINCT GPA) FROM Student S2 WHERE S1.GPA < S2.GPA)
ORDER BY S1.GPA DESC;
SELECT DISTINCT GPA FROM Student S1
WHERE 3 > (SELECT COUNT(DISTINCT GPA) FROM Student S2 WHERE S1.GPA > S2.GPA)
ORDER BY S1.GPA;
SELECT DISTINCT GPA FROM Student S1
WHERE 3 = (SELECT COUNT(DISTINCT GPA) FROM Student S2 WHERE S1.GPA < S2.GPA)
ORDER BY S1.GPA DESC;
SELECT MAJOR, MAX(GPA) AS MAXGPA
FROM Student
GROUP BY MAJOR;
SELECT FIRST_NAME, GPA FROM Student
WHERE GPA = (SELECT MAX(GPA) FROM Student);

CREATE table CloneTable AS SELECT * FROM Student;

UPDATE Student
SET GPA = 7.5
where MAJOR = 'Computer Science';

SELECT MAJOR, AVG(GPA) AS AVERAGE_GPA
FROM Studentstudent
GROUP BY MAJOR;
SELECT * FROM Student
ORDER BY GPA DESC
LIMIT 3;
SELECT MAJOR, COUNT(STUDENT_ID) AS HIGH_GPA_COUNT
FROM Student
WHERE GPA > 7.5
GROUP BY MAJOR;
SELECT * FROM Student
WHERE GPA = (SELECT GPA FROM Student WHERE STUDENT_ID = 201);

Set SQL_SAFE_UPDATES = 0;